<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_donald_ani</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_donald</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Vars
image_speed = 0.1;
//dont need grav for world don.
depth = -y;
grav = 0;
hsp  = 0; //horiz-speed
vsp  = 0; //vert-speed
defJumpspeed = 3;
defMovespeed = 3;
jumpspeed = 3;
movespeed = 3;
hp = 100;
key_left = 0;
key_right = 0;
key_jump = 0;
damage   = 20;
xHatOffset = 3;
yHatOffset = -15;
global.powerUpHat = false;

//create camera
//dont need camera in world map
//instance_create(x,y,obj_view);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and Inputs
if (global.pause == 1)
{
    exit;
}
if ((hp &lt;= 0) || (y &gt; room_height)) // check if we are dead or offscreen
{
    //restarts room
    instance_create(0,0,obj_game_over);
}

key_jump = max(keyboard_check(ord("W")),keyboard_check(vk_up),0);
key_down = max(keyboard_check(ord("S")),keyboard_check(vk_down),0);
key_right = max(keyboard_check(ord("D")),keyboard_check(vk_right),0);
key_left = max(keyboard_check(ord("A")),keyboard_check(vk_left),0)

if (key_jump == 1)
{
    key_jump = 1; //jump pressed
    //Change to jumping when made, still for now
    sprite_index = spr_donald_still;

}
else if (key_down == 1)
{
    //if key down we make our jump neg.
    key_jump = -1; //jump pressed
    //Change to jumping when made, still for now
    sprite_index = spr_donald_still;

}

if (key_right == 1)
{
    key_right = 1; //right key pressed
    sprite_index = spr_donald_ani;
    //he is scaled by 2 so we need to scale by 2 here
    image_xscale = 1;
}
if (key_left)
{
    key_left = -1; //left key pressed
    sprite_index = spr_donald_ani; //moving, ani donald
     //he is scaled by 2 so we need to scale by 2 here
    image_xscale = -1;
}
/*if (keyboard_check(ord("S")))
{
    sprite_index = spr_donald_ani;
    y += 5;
    
}
*/
if (keyboard_check(vk_nokey))
{
    sprite_index = spr_donald_still; //not moving still donald
}
//Set our movement
move = key_left + key_right; //key_left is neg so we can add these to get net direction
hsp  = move * movespeed;
/*if (vsp &lt; 10)
{
    vsp += grav;
}*/

//Checking that we are against a wall, only going to jump against walls
//Will need to this if adding platforms or make the second wall child?
//May work
/*if (place_meeting(x,y+1,obj_wall))
{
    vsp = key_jump * -jumpspeed; //Our jumpspeed is pos, but neg moves up
    //play jump sound
    if (!audio_is_playing(snd_jump_sound) &amp;&amp; key_jump != 0) //check sound isnt playing
    {
        //set our volume for this sound lower and play it
        sound_volume(snd_jump_sound, 0.5);
        audio_play_sound(snd_jump_sound,0,0);
    }
}*/
vsp = key_jump * -jumpspeed; //Our jumpspeed is pos, but neg moves up
//Horizontal Collision
if (place_meeting(x+hsp,y, obj_world_collision_wall) &amp;&amp; hsp != 0)
{
    while (place_meeting(x+sign(hsp),y,obj_wall))
    {
        x -= sign(hsp)
    }
    hsp = 0;
}
x += hsp;

if (place_meeting(x,y+vsp, obj_world_collision_wall) &amp;&amp; vsp != 0)
{
    while (place_meeting(x,y+sign(vsp), obj_wall))
    {
        y -= sign(vsp);
    }
    vsp = 0;
}
y += vsp;




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
